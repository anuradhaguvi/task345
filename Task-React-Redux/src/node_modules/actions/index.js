import {
  FETCH_POKEMONS_START,
  FETCH_POKEMONS_SUCCESS,
  FETCH_POKEMONS_FAILURE,
  LOAD_MORE_POKEMONS_START,
  LOAD_MORE_POKEMONS_SUCCESS,
  LOAD_MORE_POKEMONS_FAILURE,
  FETCH_POKEMON_BY_ID_START,
  FETCH_POKEMON_BY_ID_SUCCESS,
  FETCH_POKEMON_BY_ID_FAILURE,
  SEARCH_POKEMON
} from 'actionTypes'
import {getRenderedPokemonsLength} from 'selectors'
import {
  fetchPokemons as fetchPokemonsApi,
  loadMorePokemons as loadMorePokemonsApi,
  fetchPokemonsById as fetchPokemonsByIdApi,
} from 'api'

export const fetchPokemons = () => async dispatch => {
  dispatch({type: FETCH_POKEMONS_START})

  try {
    const pokemons = await fetchPokemonsApi()
    dispatch({
      type: FETCH_POKEMONS_SUCCESS,
      payload: pokemons
    })
  } catch (err) {
    dispatch({
      type: FETCH_POKEMONS_FAILURE,
      payload: err,
      error: true
    })
  }
}

export const loadMorePokemons = () => async (dispatch, getState) => {
  const offset = getRenderedPokemonsLength(getState())

  dispatch({type: LOAD_MORE_POKEMONS_START})

  try {
    const pokemons = await loadMorePokemonsApi({offset})
    dispatch({
      type: LOAD_MORE_POKEMONS_SUCCESS,
      payload: pokemons
    })
  } catch (err) {
    dispatch({
      type: LOAD_MORE_POKEMONS_FAILURE,
      payload: err,
      error: true
    })
  }
}

export const fetchPokemonsById = (id) => async dispatch => {
  dispatch({type: FETCH_POKEMON_BY_ID_START})

  try {
    const pokemon = await fetchPokemonsByIdApi(id)
    dispatch({
      type: FETCH_POKEMON_BY_ID_SUCCESS,
      payload: pokemon
    })
  } catch (err) {
    dispatch({
      type: FETCH_POKEMON_BY_ID_FAILURE,
      payload: err,
      error: true
    })
  }
}

export const searchPokemon = (text) => dispatch => {
  dispatch({
    type: SEARCH_POKEMON,
    payload: text
  })
}
